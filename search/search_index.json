{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"simulateTestCases simulateTestCases is a Python package designed for running a series of ADflow simulations using Mphys and OpenMDAO. This package provides streamlined functions to automate simulation test cases. Key Features Simplifies running multiple simulation cases with ADflow. Integrates with Mphys and OpenMDAO for streamlined data management. Generates comparison plots for experimental conditions in each case.","title":"Home"},{"location":"#simulatetestcases","text":"simulateTestCases is a Python package designed for running a series of ADflow simulations using Mphys and OpenMDAO. This package provides streamlined functions to automate simulation test cases.","title":"simulateTestCases"},{"location":"#key-features","text":"Simplifies running multiple simulation cases with ADflow. Integrates with Mphys and OpenMDAO for streamlined data management. Generates comparison plots for experimental conditions in each case.","title":"Key Features"},{"location":"additionalInfo/","text":"Additional Information For more information on ADflow code vist ADflow Documentation","title":"Additional Information"},{"location":"additionalInfo/#additional-information","text":"For more information on ADflow code vist ADflow Documentation","title":"Additional Information"},{"location":"installation/","text":"Dependencies and Installation Required Libraries The package requires the following libraries, which can automatically be installed with pip : numpy>=1.21 scipy>=1.7 mpi4py>=3.1.4 pyyaml matplotlib pandas petsc4py Additionally, the following packages are also needed but may require manual installation: openmdao mdolab-baseclasses adflow mphys Installation Instructions To install simulateTestCases , use the following commands: Clone the repository: git clone https://github.com/gorodetsky-umich/simulateTestCases.git Navigate into the directory: cd simulateTestCases To install the package without dependencies: pip install . To install the package along with dependencies listed in requirements.txt : pip install . -r requirements.txt For an editable installation: pip install -e .","title":"Installation"},{"location":"installation/#dependencies-and-installation","text":"","title":"Dependencies and Installation"},{"location":"installation/#required-libraries","text":"The package requires the following libraries, which can automatically be installed with pip : numpy>=1.21 scipy>=1.7 mpi4py>=3.1.4 pyyaml matplotlib pandas petsc4py Additionally, the following packages are also needed but may require manual installation: openmdao mdolab-baseclasses adflow mphys","title":"Required Libraries"},{"location":"installation/#installation-instructions","text":"To install simulateTestCases , use the following commands: Clone the repository: git clone https://github.com/gorodetsky-umich/simulateTestCases.git Navigate into the directory: cd simulateTestCases To install the package without dependencies: pip install . To install the package along with dependencies listed in requirements.txt : pip install . -r requirements.txt For an editable installation: pip install -e .","title":"Installation Instructions"},{"location":"tutorials/inputs/","text":"Inputs The simulateTestCases package requires the following inputs to configure and execute simulations: 1. YAML Configuration File A YAML file is required to define the simulation parameters and organize test cases. The YAML file structure and respective descriptions are given below. Input YAML file Structure The YAML file organizes simulation data into a structured hierarchy, enabling clear configuration of cases and experimental conditions. Below is the hierarchical structure used in the YAML file: Hierarchies | |---- Hierarchie 1 | |---- name |---- cases: | | | |---- case 1 | | | | | |---- name | | |---- meshes folder path | | |---- mesh files | | |---- Geometry Info | | |---- Solver Parameters | | |---- Experimental Conditions: | | | | | |---- Condition 1 | | | | | |---- Other conditions as applicable | | | |---- Other cases as needed | |---- Additional hierarchy levels as required. Descriptions Hierarchies : A list to organize the simulation data into a multi-level structure for easy navigation. Hierarchie 1 : The first level in the hierarchy, where main categories are defined. name : Represents the name of the hierarchy. cases : A list containing individual simulation cases under the hierarchy. case 1 : An individual simulation case with detailed specifications. name : The name of the airfoil or the model used in the simulation. meshes folder path : Path to the folder containg mesh files. mesh files : A list of mesh files Geometry Info : Geometrical details that are required: Reference area and chord length for the geometry. Solver Parameters : Specific ADflow solver parameters for running the case. Experimental Conditions : A list defining experimental conditions. Condition 1 : Details required to define an AeroProblem: Reynold's number, Mach number, temperature, list of Angle of Attacks and the location of experimental data. Other conditions : Additional experimental conditions that may be present. Other Cases : Additional cases that may be present in current hierarchie. Additional hierarchy levels : Allows for adding more structured levels if needed. Please note that adherence to this structure is essential; any deviation may lead to errors when running simulations. Examples of correctly formatted YAML files are provided in the examples folder. A Python script named dict_to_yaml is available to help convert a Python dictionary (structured according to the hierarchy above) into a .yaml file. This script can also be used as a starting point for generating custom YAML files. The example YAML files and dict_to_yaml script serve as templates to facilitate proper configuration. Solver Parameters The Solver parameters is a dictionary containing options specific to the ADflow CFD solver, allowing users to customize the solver's behavior to suit their simulation needs. Detailed descriptions of these parameters and their usage can be found in the ADflow Documentation . If the dictionary is empty or if the default parameters are not modified, the code will use a predefined set of default solver options. These defaults are designed to provide a reliable baseline configuration for running simulations effectively without requiring manual adjustments. Default Solver Parameters: # Print Options \"printIterations\": False, \"printAllOptions\": False, \"printIntro\": False, \"printTiming\": False, # I/O Parameters \"gridFile\": f\"grids/naca0012_L1.cgns\", # Default grid file \"outputDirectory\": \".\", \"monitorvariables\": [\"resrho\", \"resturb\", \"cl\", \"cd\", \"yplus\"], \"writeTecplotSurfaceSolution\": True, # Physics Parameters \"equationType\": \"RANS\", \"liftindex\": 3, # z is the lift direction # Solver Parameters \"smoother\": \"DADI\", \"CFL\": 0.5, \"CFLCoarse\": 0.25, \"MGCycle\": \"sg\", \"MGStartLevel\": -1, \"nCyclesCoarse\": 250, # ANK Solver Parameters \"useANKSolver\": True, \"nsubiterturb\": 5, \"anksecondordswitchtol\": 1e-4, \"ankcoupledswitchtol\": 1e-6, \"ankinnerpreconits\": 2, \"ankouterpreconits\": 2, \"anklinresmax\": 0.1, # Termination Criteria \"L2Convergence\": 1e-12, \"L2ConvergenceCoarse\": 1e-2, \"nCycles\": 75000, Experimental Conditions To define the problem, referred to as the AeroProblem (focused on aerodynamics), the following conditions along with the Angle of Attack(AoA) and path to the experimental data: Reynolds number Mach number Temperature Reynolds length (Computed from geometrical data) Other properties, such as pressure or density, will be calculated automatically based on the specified values and the governing gas laws. The Angle of Attack (AoA) is required to define the aerodynamic orientation of the flow. The path to experimental data can be left blank, as it will not affect the simulation. However, leaving it blank will generate a warning during the post-processing stage. Location of Mesh Files Specifying the location of the mesh files requires two inputs in every case: meshes_folder_path gets the path to the folder that contains the mesh files mesh_files gets the list of file names, that to be run, in the folder specified above. 2. Output Directory Path A string specifying the directory where simulation results will be stored. The directory structure mirrors the hierarchy defined in the YAML file. Ensure that: The specified directory exists or permissions allow for its creation. The directory has sufficient space to store simulation results.","title":"Inputs"},{"location":"tutorials/inputs/#inputs","text":"The simulateTestCases package requires the following inputs to configure and execute simulations:","title":"Inputs"},{"location":"tutorials/inputs/#1-yaml-configuration-file","text":"A YAML file is required to define the simulation parameters and organize test cases. The YAML file structure and respective descriptions are given below.","title":"1. YAML Configuration File"},{"location":"tutorials/inputs/#input-yaml-file-structure","text":"The YAML file organizes simulation data into a structured hierarchy, enabling clear configuration of cases and experimental conditions. Below is the hierarchical structure used in the YAML file: Hierarchies | |---- Hierarchie 1 | |---- name |---- cases: | | | |---- case 1 | | | | | |---- name | | |---- meshes folder path | | |---- mesh files | | |---- Geometry Info | | |---- Solver Parameters | | |---- Experimental Conditions: | | | | | |---- Condition 1 | | | | | |---- Other conditions as applicable | | | |---- Other cases as needed | |---- Additional hierarchy levels as required.","title":"Input YAML file Structure"},{"location":"tutorials/inputs/#descriptions","text":"Hierarchies : A list to organize the simulation data into a multi-level structure for easy navigation. Hierarchie 1 : The first level in the hierarchy, where main categories are defined. name : Represents the name of the hierarchy. cases : A list containing individual simulation cases under the hierarchy. case 1 : An individual simulation case with detailed specifications. name : The name of the airfoil or the model used in the simulation. meshes folder path : Path to the folder containg mesh files. mesh files : A list of mesh files Geometry Info : Geometrical details that are required: Reference area and chord length for the geometry. Solver Parameters : Specific ADflow solver parameters for running the case. Experimental Conditions : A list defining experimental conditions. Condition 1 : Details required to define an AeroProblem: Reynold's number, Mach number, temperature, list of Angle of Attacks and the location of experimental data. Other conditions : Additional experimental conditions that may be present. Other Cases : Additional cases that may be present in current hierarchie. Additional hierarchy levels : Allows for adding more structured levels if needed. Please note that adherence to this structure is essential; any deviation may lead to errors when running simulations. Examples of correctly formatted YAML files are provided in the examples folder. A Python script named dict_to_yaml is available to help convert a Python dictionary (structured according to the hierarchy above) into a .yaml file. This script can also be used as a starting point for generating custom YAML files. The example YAML files and dict_to_yaml script serve as templates to facilitate proper configuration.","title":"Descriptions"},{"location":"tutorials/inputs/#solver-parameters","text":"The Solver parameters is a dictionary containing options specific to the ADflow CFD solver, allowing users to customize the solver's behavior to suit their simulation needs. Detailed descriptions of these parameters and their usage can be found in the ADflow Documentation . If the dictionary is empty or if the default parameters are not modified, the code will use a predefined set of default solver options. These defaults are designed to provide a reliable baseline configuration for running simulations effectively without requiring manual adjustments.","title":"Solver Parameters"},{"location":"tutorials/inputs/#default-solver-parameters","text":"# Print Options \"printIterations\": False, \"printAllOptions\": False, \"printIntro\": False, \"printTiming\": False, # I/O Parameters \"gridFile\": f\"grids/naca0012_L1.cgns\", # Default grid file \"outputDirectory\": \".\", \"monitorvariables\": [\"resrho\", \"resturb\", \"cl\", \"cd\", \"yplus\"], \"writeTecplotSurfaceSolution\": True, # Physics Parameters \"equationType\": \"RANS\", \"liftindex\": 3, # z is the lift direction # Solver Parameters \"smoother\": \"DADI\", \"CFL\": 0.5, \"CFLCoarse\": 0.25, \"MGCycle\": \"sg\", \"MGStartLevel\": -1, \"nCyclesCoarse\": 250, # ANK Solver Parameters \"useANKSolver\": True, \"nsubiterturb\": 5, \"anksecondordswitchtol\": 1e-4, \"ankcoupledswitchtol\": 1e-6, \"ankinnerpreconits\": 2, \"ankouterpreconits\": 2, \"anklinresmax\": 0.1, # Termination Criteria \"L2Convergence\": 1e-12, \"L2ConvergenceCoarse\": 1e-2, \"nCycles\": 75000,","title":"Default Solver Parameters:"},{"location":"tutorials/inputs/#experimental-conditions","text":"To define the problem, referred to as the AeroProblem (focused on aerodynamics), the following conditions along with the Angle of Attack(AoA) and path to the experimental data: Reynolds number Mach number Temperature Reynolds length (Computed from geometrical data) Other properties, such as pressure or density, will be calculated automatically based on the specified values and the governing gas laws. The Angle of Attack (AoA) is required to define the aerodynamic orientation of the flow. The path to experimental data can be left blank, as it will not affect the simulation. However, leaving it blank will generate a warning during the post-processing stage.","title":"Experimental Conditions"},{"location":"tutorials/inputs/#location-of-mesh-files","text":"Specifying the location of the mesh files requires two inputs in every case: meshes_folder_path gets the path to the folder that contains the mesh files mesh_files gets the list of file names, that to be run, in the folder specified above.","title":"Location of Mesh Files"},{"location":"tutorials/inputs/#2-output-directory-path","text":"A string specifying the directory where simulation results will be stored. The directory structure mirrors the hierarchy defined in the YAML file. Ensure that: The specified directory exists or permissions allow for its creation. The directory has sufficient space to store simulation results.","title":"2. Output Directory Path"},{"location":"tutorials/introduction/","text":"Introduction The simulateTestCases package is a Python-based tool designed to streamline the execution and data management of ADflow simulations. It integrates with MPhys to provide a structured framework for running aerodynamic flow simulations and organizing the resulting data in a hierarchical manner. This package is particularly suited for projects involving multiple configurations or test cases, ensuring that simulation results are stored and categorized systematically. Key Features Automates the execution of multiple ADflow simulation cases. Utilizes YAML configuration files for defining simulation parameters and organizing cases. Stores simulation data in a structured directory hierarchy for ease of access and analysis. Supports post-processing with methods for comparing results to experimental data and generating plots. Inputs The simulateTestCases package requires the following inputs: YAML Configuration File: A YAML file specifying: Simulation hierarchy. Mesh files and solver parameters. Experimental conditions (e.g., Reynolds number, Mach number, and angle of attack). Output Directory: A directory path where the simulation results will be saved. The structure of this directory mirrors the hierarchy defined in the YAML file. Outputs The outputs of simulateTestCases are stored in directories organized according to the simulation hierarchy. These include: Simulation Data: Results such as C_L, C_D, and Wall Time are saved in CSV and YAML formats. Hierarchical Directory Structure: Output directories follow the YAML-defined hierarchy, allowing for easy navigation of results. Visualization: Comparison plots (e.g., experimental vs. simulated data) are generated in PNG format. Example Hierarchy The package organizes simulation data into a clear and logical hierarchy. An example of this structure, that has been used in the tutorials is shown below: Aero Problem | |---- 2D Clean | | | |---- NACA 0012 | |---- 2D High-Lift | | | |---- Mc Donnell Dolugas 30P-30N | |---- 3D Clean | | | |---- NASA CRM clean Configuration | |---- 3D High-Lift | |---- DLR High-Lift Configuration Explanation of the Hierarchy: Aero Problem: Categorizes the type of aerodynamic analysis, such as clean flow or high-lift studies, in 2D or 3D configurations. 2D Clean: Simulations for 2D configurations without high-lift devices (e.g., NACA 0012 airfoil). 2D High-Lift: Simulations for 2D configurations with high-lift devices (e.g., McDonnell Douglas 30P-30N airfoil). 3D Clean: Simulations for 3D configurations without high-lift devices (e.g., NASA Common Research Model Clean Configuration). 3D High-Lift: Simulations for 3D configurations with high-lift devices (e.g., DLR High-Lift Configuration).","title":"Introduction"},{"location":"tutorials/introduction/#introduction","text":"The simulateTestCases package is a Python-based tool designed to streamline the execution and data management of ADflow simulations. It integrates with MPhys to provide a structured framework for running aerodynamic flow simulations and organizing the resulting data in a hierarchical manner. This package is particularly suited for projects involving multiple configurations or test cases, ensuring that simulation results are stored and categorized systematically.","title":"Introduction"},{"location":"tutorials/introduction/#key-features","text":"Automates the execution of multiple ADflow simulation cases. Utilizes YAML configuration files for defining simulation parameters and organizing cases. Stores simulation data in a structured directory hierarchy for ease of access and analysis. Supports post-processing with methods for comparing results to experimental data and generating plots.","title":"Key Features"},{"location":"tutorials/introduction/#inputs","text":"The simulateTestCases package requires the following inputs: YAML Configuration File: A YAML file specifying: Simulation hierarchy. Mesh files and solver parameters. Experimental conditions (e.g., Reynolds number, Mach number, and angle of attack). Output Directory: A directory path where the simulation results will be saved. The structure of this directory mirrors the hierarchy defined in the YAML file.","title":"Inputs"},{"location":"tutorials/introduction/#outputs","text":"The outputs of simulateTestCases are stored in directories organized according to the simulation hierarchy. These include: Simulation Data: Results such as C_L, C_D, and Wall Time are saved in CSV and YAML formats. Hierarchical Directory Structure: Output directories follow the YAML-defined hierarchy, allowing for easy navigation of results. Visualization: Comparison plots (e.g., experimental vs. simulated data) are generated in PNG format.","title":"Outputs"},{"location":"tutorials/introduction/#example-hierarchy","text":"The package organizes simulation data into a clear and logical hierarchy. An example of this structure, that has been used in the tutorials is shown below: Aero Problem | |---- 2D Clean | | | |---- NACA 0012 | |---- 2D High-Lift | | | |---- Mc Donnell Dolugas 30P-30N | |---- 3D Clean | | | |---- NASA CRM clean Configuration | |---- 3D High-Lift | |---- DLR High-Lift Configuration Explanation of the Hierarchy: Aero Problem: Categorizes the type of aerodynamic analysis, such as clean flow or high-lift studies, in 2D or 3D configurations. 2D Clean: Simulations for 2D configurations without high-lift devices (e.g., NACA 0012 airfoil). 2D High-Lift: Simulations for 2D configurations with high-lift devices (e.g., McDonnell Douglas 30P-30N airfoil). 3D Clean: Simulations for 3D configurations without high-lift devices (e.g., NASA Common Research Model Clean Configuration). 3D High-Lift: Simulations for 3D configurations with high-lift devices (e.g., DLR High-Lift Configuration).","title":"Example Hierarchy"},{"location":"tutorials/outputs/","text":"Outputs The simulateTestCases package organizes simulation results into a structured directory hierarchy. This hierarchy mirrors the simulation setup defined in the YAML file. Structure of the Output Directory File Types CSV Files : Stored in Refinement Level directory Contain simulation data, including: Coefficient of Lift (C L ) Coefficient of Drag (C D ) Wall Time YAML Files : Two types: Per-case YAML files ( out.yaml ) stored in each AoA directory. A summary YAML file for the entire simulation. PNG Files : Comparison plots of experimental vs. simulated data, stored in the corresponding experimental level level directory. This structure ensures that simulation results are easy to navigate and analyze.","title":"outputs"},{"location":"tutorials/outputs/#outputs","text":"The simulateTestCases package organizes simulation results into a structured directory hierarchy. This hierarchy mirrors the simulation setup defined in the YAML file.","title":"Outputs"},{"location":"tutorials/outputs/#structure-of-the-output-directory","text":"","title":"Structure of the Output Directory"},{"location":"tutorials/outputs/#file-types","text":"CSV Files : Stored in Refinement Level directory Contain simulation data, including: Coefficient of Lift (C L ) Coefficient of Drag (C D ) Wall Time YAML Files : Two types: Per-case YAML files ( out.yaml ) stored in each AoA directory. A summary YAML file for the entire simulation. PNG Files : Comparison plots of experimental vs. simulated data, stored in the corresponding experimental level level directory. This structure ensures that simulation results are easy to navigate and analyze.","title":"File Types"},{"location":"tutorials/usage/","text":"Usage Example usage Here\u2019s a quick example of how to use simulateTestCases : from simulateTestCases.run_sim import run_sim # Initialize the runner with configuration file sim = run_sim('naca0012_simInfo.yaml', 'output_dir') # Run the simulation series sim.run_problem() # Analyze results sim.post_process() The above script runs a simulation of the NACA 0012 Airfoil, and is included in the examples folder. To run the above python script: Copy the examples directory to a different location: cp -r examples <Path to directory to save copy of examples> Navigate into the directory: cd <Path to directory to save copy of examples>/examples Run the python script with a single processor: python run_naca0012.py or run with multiple processors mpirun -np <number of processors> python run_naca0012.py to run using multiple processors After execution, the results are saved in the specified output directory. Key outputs include: Simulation outputs in structured directories for each refinement and angle of attack (AOA) level. Plots and analysis results, including comparisons with experimental data. Generated YAML files, summarizing simulation and output information. Grid Files Grids for NACA 0012 and Mc Donnell Dolugas 30P-30N are provided under grids in the examples directory. The other grids (CRM clean, and DLR High-Lift) including Naca 0012 and 30P-30N can be found at Dropbox folder . Methods 1. run_problem() This method, when called runs the simulations, generates the aoa_<aoa>.yaml in each AOA level directory, ADflow_out.csv in each refinement level directory, and overall_sim_info.yaml in the ouput directory specified by the user, along with the oututs generated by ADflow. and stores the outputs in a structure manner. No additional outputs are need to run this method. 2. post_process() A plot comparing the experimental data vs the Adflow output at all refinement levels can be genrated using this methods. Similar to the method described above, no additional inputs are need. This method can eother be run along with run_problem() or independently at a later time.","title":"Usage"},{"location":"tutorials/usage/#usage","text":"","title":"Usage"},{"location":"tutorials/usage/#example-usage","text":"Here\u2019s a quick example of how to use simulateTestCases : from simulateTestCases.run_sim import run_sim # Initialize the runner with configuration file sim = run_sim('naca0012_simInfo.yaml', 'output_dir') # Run the simulation series sim.run_problem() # Analyze results sim.post_process() The above script runs a simulation of the NACA 0012 Airfoil, and is included in the examples folder. To run the above python script: Copy the examples directory to a different location: cp -r examples <Path to directory to save copy of examples> Navigate into the directory: cd <Path to directory to save copy of examples>/examples Run the python script with a single processor: python run_naca0012.py or run with multiple processors mpirun -np <number of processors> python run_naca0012.py to run using multiple processors After execution, the results are saved in the specified output directory. Key outputs include: Simulation outputs in structured directories for each refinement and angle of attack (AOA) level. Plots and analysis results, including comparisons with experimental data. Generated YAML files, summarizing simulation and output information.","title":"Example usage"},{"location":"tutorials/usage/#grid-files","text":"Grids for NACA 0012 and Mc Donnell Dolugas 30P-30N are provided under grids in the examples directory. The other grids (CRM clean, and DLR High-Lift) including Naca 0012 and 30P-30N can be found at Dropbox folder .","title":"Grid Files"},{"location":"tutorials/usage/#methods","text":"","title":"Methods"},{"location":"tutorials/usage/#1-run_problem","text":"This method, when called runs the simulations, generates the aoa_<aoa>.yaml in each AOA level directory, ADflow_out.csv in each refinement level directory, and overall_sim_info.yaml in the ouput directory specified by the user, along with the oututs generated by ADflow. and stores the outputs in a structure manner. No additional outputs are need to run this method.","title":"1. run_problem()"},{"location":"tutorials/usage/#2-post_process","text":"A plot comparing the experimental data vs the Adflow output at all refinement levels can be genrated using this methods. Similar to the method described above, no additional inputs are need. This method can eother be run along with run_problem() or independently at a later time.","title":"2. post_process()"}]}